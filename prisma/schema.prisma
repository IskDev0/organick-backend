datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  admin
  customer
  author
}

model User {
  id           String   @id @default(uuid())
  firstName    String
  lastName     String
  email        String   @unique
  phone        String?
  passwordHash String
  image        String?
  roleId       Int      @default(1)
  createdAt    DateTime @default(now()) @db.Timestamptz(0)
  updatedAt    DateTime @updatedAt

  UserAddress UserAddress[]
  role        UserRole      @relation(fields: [roleId], references: [id])
  Review      Review[]
  Order       Order[]
  News        News[]
}

model UserRole {
  id   Int    @id @default(autoincrement())
  name String @unique

  users User[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Decimal
  image       String?
  stock       Int      @default(0)
  isActive    Boolean  @default(true)
  discount    Decimal  @default(0)
  createdAt   DateTime @default(now()) @db.Timestamptz(0)
  updatedAt   DateTime @updatedAt
  categoryId  Int
  isDeleted   Boolean  @default(false)

  category   Category    @relation(fields: [categoryId], references: [id])
  reviews    Review[]
  orderItems OrderItem[]
}

model Review {
  id        String   @id @default(uuid())
  productId String
  userId    String
  rating    Int
  comment   String
  createdAt DateTime @default(now()) @db.Timestamptz(0)

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

model UserAddress {
  id           String  @id @default(uuid())
  userId       String
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  zipCode      String
  country      String

  user User @relation(fields: [userId], references: [id])

  Order Order[]
}

enum OrderStatus {
  pending
  paid
  processing
  shipped
  delivered
}

model Order {
  id          String      @id @default(uuid())
  userId      String
  totalAmount Decimal
  status      OrderStatus @default(pending)
  addressId   String
  createdAt   DateTime    @default(now()) @db.Timestamptz(0)
  updatedAt   DateTime    @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  payments   Payment[]

  UserAddress UserAddress @relation(fields: [addressId], references: [id])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

enum PaymentStatus {
  pending
  paid
  unpaid
  failed
}

model Payment {
  id            String        @id @default(uuid())
  orderId       String
  amount        Decimal
  paymentMethod String
  paymentStatus PaymentStatus @default(paid)
  createdAt     DateTime      @default(now()) @db.Timestamptz(0)

  order Order @relation(fields: [orderId], references: [id])
}

model Subscribers {
  id             String   @id @default(uuid())
  email          String   @unique
  isSubscribed   Boolean  @default(true)
  subscribedAt   DateTime @default(now()) @db.Timestamptz(0)
  unsubscribedAt DateTime @updatedAt
}

model News {
  id               String   @id @default(uuid())
  title            String
  content          String
  userId           String
  preview          String
  shortDescription String
  createdAt        DateTime @default(now()) @db.Timestamptz(0)
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Team {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  position  String
  image     String?
  instagram String?
  facebook  String?
  twitter   String?
  linkedin  String?
  createdAt DateTime @default(now()) @db.Timestamptz(0)
}

model Testimonial {
  id        String   @id @default(uuid())
  fullName  String
  position  String
  content   String
  image     String?
  createdAt DateTime @default(now()) @db.Timestamptz(0)
}

enum ApplicationStatus {
  new
  pending
  accepted
  rejected
}

model Application {
  id        String            @id @default(uuid())
  fullName  String
  email     String
  company   String
  subject   String
  message   String
  status    ApplicationStatus @default(new)
  createdAt DateTime          @default(now()) @db.Timestamptz(0)
}
